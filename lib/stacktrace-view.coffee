{View, EditorView} = require 'atom'
{Subscriber} = require 'emissary'
{chomp} = require 'line-chomper'

{Stacktrace, PREFIX} = require './stacktrace'

existingViews = {}

class StacktraceView extends View

  Subscriber.includeInto this

  @content: (trace) ->
    tclass = if trace.isActive() then 'activated' else ''
    @div class: "stacktrace traceview tool-panel padded #{tclass}", =>
      @div class: 'panel padded', =>
        @h2 class: 'error-message', trace.message
      @div class: 'frames', =>
        for frame in trace.frames
          @subview 'frame', new FrameView frame, => trace.activate()

  initialize: (@trace) ->
    @uri = @trace.getUrl()
    @subscribe Stacktrace, 'active-changed', (e) =>
      if e.newTrace is @trace
        @addClass 'activated'
      else
        @removeClass 'activated'

  beforeRemove: ->
    @unsubscribe Stacktrace
    delete existingViews[@trace]

  # Internal: Return the window title.
  #
  getTitle: ->
    @trace.message

  # Internal: Register an opener function in the workspace to handle URLs
  # generated by a Stacktrace.
  #
  @registerIn: (workspace) ->
    workspace.registerOpener (filePath) ->
      trace = Stacktrace.forUrl(filePath)
      if trace?
        existingViews[trace] ?= new StacktraceView(trace)


class FrameView extends View

  @content: (frame, navCallback) ->
    @div class: 'frame inset-panel', =>
      @div class: 'panel-heading', =>
        @span class: 'icon icon-fold inline-block', click: 'minimize'
        @span class: 'icon icon-unfold inline-block', click: 'restore'
        @span class: 'function-name text-highlight inline-block', frame.functionName
        @span class: 'source-location text-info inline-block pull-right', click: 'navigate', =>
          @text "#{frame.rawPath} @ #{frame.lineNumber}"
      @div class: 'panel-body padded', outlet: 'body', click: 'navigate', =>
        @subview 'source', new EditorView(mini: true)

  initialize: (@frame, @navCallback) ->
    chomp @frame.realPath, fromLine: 0, toLine: 100, (err, lines) =>
      if err?
        console.error err
      else
        grammar = atom.syntax.selectGrammar @frame.realPath, lines.join("\n")
        @source.getEditor().setGrammar grammar

    @frame.getContext 3, (err, lines) =>
      if err?
        console.error err
      else
        @source.getEditor().setText lines.join("\n")

  navigate: ->
    @navCallback()
    @frame.navigateTo()

  minimize: ->
    @addClass 'minimized'
    @body.hide 'fast'

  restore: ->
    @removeClass 'minimized'
    @body.show 'fast'

module.exports =
  StacktraceView: StacktraceView
  FrameView: FrameView
